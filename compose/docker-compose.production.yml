version: '3.8'

services:
  # Redis Cluster for High Availability
  redis-master:
    image: redis:7-alpine
    container_name: org-chatbot-redis-master
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --appendfsync everysec
    volumes:
      - redis-master-data:/data
      - ./redis/redis-master.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - chatnet
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  redis-replica:
    image: redis:7-alpine
    container_name: org-chatbot-redis-replica
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --replicaof redis-master 6379 --masterauth ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis-replica-data:/data
    depends_on:
      - redis-master
    networks:
      - chatnet
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # PostgreSQL with Replication
  postgres-primary:
    image: postgres:15-alpine
    container_name: org-chatbot-postgres-primary
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./postgres/init-replication.sql:/docker-entrypoint-initdb.d/init-replication.sql
    ports:
      - "5432:5432"
    networks:
      - chatnet
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  postgres-replica:
    image: postgres:15-alpine
    container_name: org-chatbot-postgres-replica
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres-replica-data:/var/lib/postgresql/data
    depends_on:
      - postgres-primary
    networks:
      - chatnet
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Ollama AI Service with GPU Support
  ollama:
    image: ollama/ollama:latest
    container_name: org-chatbot-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama-models:/root/.ollama
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - chatnet
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
      - OLLAMA_MODELS=/root/.ollama/models
      - OLLAMA_KEEP_ALIVE=24h
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
          # Uncomment if GPU is available
          # devices:
          #   - driver: nvidia
          #     count: 1
          #     capabilities: [gpu]
        reservations:
          memory: 4G
          cpus: '2.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s
    entrypoint: |
      bash -c "
        ollama serve &
        sleep 10
        ollama pull llama3.2:3b
        ollama pull phi3:3.8b
        wait
      "

  # Chat API Service
  chat-api:
    build:
      context: ../api
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    container_name: org-chatbot-api
    restart: unless-stopped
    depends_on:
      redis-master:
        condition: service_healthy
      postgres-primary:
        condition: service_healthy
      ollama:
        condition: service_healthy
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-primary:5432/${POSTGRES_DB}
      - DATABASE_REPLICA_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-replica:5432/${POSTGRES_DB}
      
      # Redis Configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-master:6379/0
      - REDIS_REPLICA_URL=redis://:${REDIS_PASSWORD}@redis-replica:6379/0
      
      # Ollama Configuration
      - OLLAMA_URL=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL:-llama3.2:3b}
      - OLLAMA_FAST_MODEL=${OLLAMA_FAST_MODEL:-phi3:3.8b}
      - OLLAMA_TIMEOUT=120
      - OLLAMA_MAX_RETRIES=3
      
      # Security Configuration
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=3600
      - RATE_LIMIT_PER_MINUTE=60
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      
      # Application Configuration
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - WORKERS=4
      - HOST=0.0.0.0
      - PORT=8000
      
      # Monitoring
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      
      # Session Configuration
      - SESSION_TTL_SECONDS=259200
      - MAX_SESSION_SIZE=10000
      
      # Performance
      - CACHE_TTL=3600
      - MAX_CONCURRENT_REQUESTS=100
    ports:
      - "8000:8000"
      - "9090:9090"
    networks:
      - chatnet
    volumes:
      - ./logs/api:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
        max_failure_ratio: 0.3

  # Frontend Service
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: org-chatbot-frontend
    restart: unless-stopped
    depends_on:
      - chat-api
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_VERSION=${VERSION:-1.0.0}
    ports:
      - "3000:80"
    networks:
      - chatnet
    volumes:
      - ./logs/frontend:/var/log/nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Nginx Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: org-chatbot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - chat-api
      - frontend
    networks:
      - chatnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: org-chatbot-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - prometheus-data:/prometheus
    networks:
      - chatnet
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.0.0
    container_name: org-chatbot-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
    depends_on:
      - prometheus
    networks:
      - chatnet
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis Exporter for Monitoring
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: org-chatbot-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis-master:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - redis-master
    networks:
      - chatnet
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'

  # Postgres Exporter for Monitoring
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: org-chatbot-postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres-primary:5432/${POSTGRES_DB}?sslmode=disable
    depends_on:
      - postgres-primary
    networks:
      - chatnet
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: org-chatbot-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - chatnet
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'

  # Log Aggregation with Loki
  loki:
    image: grafana/loki:2.9.0
    container_name: org-chatbot-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    networks:
      - chatnet
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Promtail for Log Collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: org-chatbot-promtail
    restart: unless-stopped
    volumes:
      - ./promtail/promtail.yml:/etc/promtail/config.yml
      - ./logs:/var/log
      - /var/log:/var/log/host:ro
    networks:
      - chatnet
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

volumes:
  # Redis Data Volumes
  redis-master-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/redis/master
  
  redis-replica-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/redis/replica

  # PostgreSQL Data Volumes
  postgres-primary-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/postgres/primary
  
  postgres-replica-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/postgres/replica

  # Ollama Models Volume
  ollama-models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/ollama/models

  # Monitoring Data Volumes
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/prometheus
  
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/grafana
  
  loki-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/loki

networks:
  chatnet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16