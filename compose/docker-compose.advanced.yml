version: '3.8'

services:
  # Vector Database - Pinecone Alternative (Weaviate)
  weaviate:
    image: semitechnologies/weaviate:latest
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - ENABLE_MODULES=text2vec-openai,text2vec-cohere,text2vec-huggingface
      - CLUSTER_HOSTNAME=node1
    volumes:
      - weaviate-data:/var/lib/weaviate
    networks:
      - chatnet

  # Graph Database - Neo4j
  neo4j:
    image: neo4j:5.15-community
    restart: unless-stopped
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
      - neo4j-import:/var/lib/neo4j/import
      - neo4j-plugins:/plugins
    networks:
      - chatnet

  # Redis - Cache Layer
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - chatnet

  # PostgreSQL - Metadata Storage
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - chatnet

  # MinIO - Object Storage
  minio:
    image: minio/minio:latest
    restart: unless-stopped
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"   # API
      - "9001:9001"   # Console
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio-data:/data
    networks:
      - chatnet

  # Ollama - AI Engine
  ollama:
    image: ollama/ollama:latest
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - chatnet
    entrypoint: ["/bin/sh","-lc","ollama serve & sleep 5 && ollama pull ${OLLAMA_MODEL} && ollama pull ${OLLAMA_FAST_MODEL:-phi3} && wait"]

  # Chat API - Advanced Version
  chat-api:
    build: 
      context: ./chat-api
      dockerfile: Dockerfile.advanced
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
      - weaviate
      - neo4j
      - ollama
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - WEAVIATE_URL=http://weaviate:8080
      - NEO4J_URL=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - OLLAMA_URL=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL}
      - OLLAMA_FAST_MODEL=${OLLAMA_FAST_MODEL:-phi3}
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - S3_BUCKET=${S3_BUCKET}
      - SESSION_TTL_SECONDS=${SESSION_TTL_SECONDS}
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE}
    networks:
      - chatnet

  # Frontend
  frontend:
    build: ./frontend
    restart: unless-stopped
    depends_on:
      - chat-api
    ports:
      - "3000:80"
    networks:
      - chatnet

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - chatnet

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - chatnet

volumes:
  redis-data:
  postgres-data:
  weaviate-data:
  neo4j-data:
  neo4j-logs:
  neo4j-import:
  neo4j-plugins:
  minio-data:
  ollama-data:
  prometheus-data:
  grafana-data:

networks:
  chatnet:
    driver: bridge
